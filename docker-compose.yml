version: "3"
# https://docs.docker.com/compose/compose-file/compose-versioning/

services:

  # WP Dev Container [build]
  wordpress:
    depends_on:
      - db-dev
    
    build:
      context: ./wp
      dockerfile: dockerfile
    
    image: wp_dev:2.0.0
    container_name: wp-dev

    restart: unless-stopped

    ports:
      - "80:80"

    environment:
      WORDPRESS_DB_HOST: mariadb:3306
      WORDPRESS_DB_NAME: $DB_NAME
      WORDPRESS_DB_USER: $DB_USER
      WORDPRESS_DB_PASSWORD: $DB_PASS
      WORDPRESS_TABLE_PREFIX: $DB_PREFIX
      WORDPRESS_DEBUG: 1

    volumes:
      - /var/lib/git/eny/events/eny_events/eny-events:/var/www/html/wp-content/plugins/eny-events
      - /var/lib/git/eny/query/eny_querystr/eny-querystr:/var/www/html/wp-content/plugins/eny-querystr
      - wp-data:/var/www/html

    networks:
      - wp-dev-network

  mariadb:
    build:
      context: ./db
      dockerfile: dockerfile

    image: db-dev:1.0.0
    container_name: db-dev

    restart: unless-stopped

    ports:
      - "3306:3306"

    environment:
      MYSQL_ROOT_PASSWORD: $ROOT_PASS
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASS

    volumes:
      - db-data:/var/lib/mysql
    networks:
      - wp-dev-network

  wpcli:
    # https://stackoverflow.com/questions/50999848/how-to-run-wp-cli-in-docker-compose-yml
    image: wordpress:cli
    user: xfs
    volumes:
      - wp-data:/var/www/html

  adminer:
    depends_on:
      - mariadb

    image: adminer:latest
    container_name: adminer

    environment:
      - ADMINER_DEFAULT_SERVER=mariadb

    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - wp-dev-network

volumes:
  wp-data:
  db-data:

# Network using 10.10.10.0 - 255
#   dhcp for internal network 10.10.10.0-15
#   gateway at 10.10.10.254 (leave the broadcast ip alone)
networks:
  wp-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.10.0/24
          ip_range: 10.10.10.0/28
          gateway: 10.10.10.254